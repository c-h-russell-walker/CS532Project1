<!DOCTYPE HTML> 
<html>
    <head>
    <title>Hwk 1</title>
    <link rel="stylesheet" href="stick.css" type="text/css"/>
    <!-- <script src="http://www.html5canvastutorials.com/libraries/kinetic2d-v1.0.2.js"></script> -->
    <script src="kinetic2d-v1.0.2.js"></script>
    <!--
    Chris Russell-Walker
    c.russell.walker@gmail.com
    BU CS532 Comp Graphics
    Project 1
    -->
    <script>
        var kin;
        var figure;

        var bodyX = 0;
        var bodyY = 40;
        var headSize = 50;
        //var bodyWidth = 10;
        var bodyHeight = 200;
        var legLength = 170;
        var armLength = 90;
        var footPos = 5;
        var armPos = 4;
        var legBend = false;
        var armBend = false;
        var floorHeight = 50;
        var oscillate = false;
        var swivel = -1;
        var jumpJackArms = false;

        function init() {
            canvas = document.getElementById("stickScene");
            context = canvas.getContext("2d");
            floorHeight = canvas.height / 2;
            document.addEventListener('mousedown', mouseClickHandler, false);
            kin = new Kinetic_2d("stickScene");
            kin.setDrawStage(function () {
                kin.clear();
                var context = kin.getContext();
                context.lineWidth = "4";
                run();
            });
        }

        function mouseClickHandler(event) {
            mouseX = event.clientX;
            mouseY = event.clientY;
            kin.startAnimation();
        }

        function cartesianToPolar(x, y) {
            var length = Math.sqrt((x * x) + (y * y));
            var angle = Math.atan(y / x);
            var polarCrds = new Array(length, angle);
            return polarCrds;
        }

        function polarToCartesian(length, theta) {
            var x = Math.cos(theta)*length;
            var y = Math.sin(theta) * length;
            return (length, theta);
        }

        function run() {
            context.save();

            context.fillText(kin.frame.toString(), 10, 10);
            context.translate(canvas.width / 2, floorHeight);
            
            figure = new stickFigure();

            if (kin.frame != 0 && kin.frame < 300) {
                jumpingJacks();
            }
            
            figure.draw();
            /*
            if (kin.frame != 0 && kin.frame < 300) {
                if (kin.frame % 6 == 0) {
                    jumpingJacks();
                }
                switch (kin.frame%20) {
                case 0,1,2,3,4,5,6,7,8,9:
                    floorHeight = floorHeight + 4;
                    armBend = false;
                    footPos = 4;
                    jumpJackArms = false;
                    break;
                case 10,11,12,13,14,15,16,17,18,19:
                    floorHeight = floorHeight - 4;
                    armBend = true;
                    jumpJackArms = true;
                    footPos = 5;
                    break;
                }
                drawFigure();
                armBend = false;
            }
            if (kin.frame >= 300 && kin.frame < 850) {
                jumpJackArms = false;
                if (kin.frame % 6 == 0) {
                    footPos = 5.5;
                    guyWalks();
                }
                if (kin.frame >= 450 && kin.frame < 550) {
                    floorHeight = floorHeight - 1;
                }
                if (kin.frame >= 550 && kin.frame < 650) {
                    floorHeight = floorHeight + 1;
                    jumpJackArms = true;
                    switch (kin.frame%20) {
                        case 0,1,2,3,4,5,6,7,8,9:
                            jumpJackArms = true;
                            break;
                    }
                }
                drawFigure();
            }
            if (kin.frame >= 850) {
                kin.stopAnimation();
                drawFigure();
                kin.frame = 0;
            } else if (kin.frame == 0) {
                drawFigure();
            }
            */
            context.restore();
        }
        /**** Stick Figure Objects ****/
        function stickFigure() {
            this.body = new body(bodyX, bodyY, bodyHeight);
            this.head = new head(bodyX, bodyY, headSize);
            this.leftArm = new arm(bodyX, bodyHeight / 2.6, -armLength, true);
            this.rightArm = new arm(bodyX, bodyHeight / 2.6, armLength, false);
            this.leftLeg = new leg(bodyX, bodyHeight, -legLength);
            this.rightLeg = new leg(bodyX, bodyHeight, legLength);
            this.draw = drawFigure;
        }
        function body(x, y, length) {
            this.draw = drawBody;
            this.x = x;
            this.y = y;
            this.length = length;
        }
        function head(x, y, radius) {
            this.draw = drawHead;
            this.x = x;
            // Puts 'neck' (bottom of circle) at top of body
            this.y = y - radius;
            this.radius = radius;
        }
        function arm(x, y, armLength, left) {
            this.x = x;
            this.y = y;
            this.length = armLength / 2;
            this.left = left;
            console.log(this.x);
            console.log(this.y);
            console.log(this.length);
            console.log(left);
            this.bicep = new bicep(this.x, this.y, this.length);
            if (left) {
                this.forearm = new forearm(-this.x + this.length, this.y, this.length);
            } else
                this.forearm = new forearm(this.x + this.length, this.y, this.length);
            console.log(this.bicep);
            console.log(this.forearm);
        }
        function leg(x, y, legLength) {
            this.x = x;
            this.y = y;
            this.length = legLength / 2;
            this.thigh = new thigh(this.x, this.y, this.length);
            this.calf = new calf(this.x + Math.abs(length), this.y + length, this.length);
        }
        function bicep(x, y, length) {
            this.draw = drawBicep;
            this.x = x;
            console.log(this.x);
            this.y = y;
            this.length = length;
        }
        function forearm(x, y, length) {
            this.draw = drawForearm;
            this.x = x;
            console.log(this.x)
            this.y = y;
            this.length = length;
        }
        function thigh(x, y, length) {
            this.draw = drawThigh;
            this.x = x;
            this.y = y;
            this.length = length;
        }
        function calf(x, y, length) {
            this.draw = drawCalf;
            this.x = x;
            this.y = y;
            this.length = length;
        }

        /**** START FIGURE DRAWING ****/
        function drawFigure() {
            this.body.draw();
            this.head.draw();
            //this.leftArm.bicep.draw(5);
            //this.leftArm.forearm.draw(40);
            this.rightArm.bicep.draw(45);
            //this.rightArm.forearm.draw(-40);
            //this.leftLeg.thigh.draw();
            //this.leftLeg.calf.draw();
            //this.rightLeg.calf.draw();
            //this.rightLeg.thigh.draw();
        }
        function drawBody() {
            context.save();
            context.moveTo(this.x, this.y);
            context.strokeStyle = "Red";
            context.lineTo(this.x, this.length);
            context.stroke();
            context.restore();
        }
        function drawHead() {
            context.save();
            kin.beginRegion();
            context.beginPath();
            context.fillStyle = "Blue";
            kin.addRegionEventListener("mouseover", function () { context.fillStyle = "Red"; });
            kin.addRegionEventListener("mouseout", function () { oscillate = false; });
            // x, y, radius, start-angle, end-angle
            context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
            //context.fill();
            context.closePath();
            context.stroke();
            kin.closeRegion();
            context.restore();
        }
        function drawBicep(angle) {
            context.save();
            this.angle = angle;
            context.translate(-this.x, this.y);
            context.moveTo(-this.x, 0);
            var polarCrds = cartesianToPolar(this.length, this.angle);
            context.lineTo(polarCrds[0], polarCrds[1]);
            //context.lineTo(this.length, this.y);
            context.stroke();
            context.restore();
        }
        function drawForearm(angle) {
            context.save();
            this.angle = angle;
            //context.moveTo(this.x, this.y);
            //context.rotate(Math.PI);
            var polarCrds = cartesianToPolar(this.length, this.angle);
            context.lineTo(polarCrds[0], polarCrds[1]);
            context.stroke();
            context.restore();
        }
        function drawThigh() {

        }
        function drawCalf() {

        }
        function drawLeg() {
            context.save();
            context.moveTo(this.x, this.y);
            context.lineTo(this.length, this.y);
            //context.rotate(Math.PI / (footPos * swivel));
            context.stroke();
            context.restore();
        }
        function drawFigureXXX() {
            drawBody();
            drawHead();
            drawLeg(1);
            drawLeg(swivel); // left swivel = -1
            if (!jumpJackArms) {
                drawArm(1);
                drawArm(swivel); // left swivel = -1
            } else {
                drawBentArms();
            }
            context.restore();
            context.save();
        }
        function drawArmXXX(swivel) {
            context.save();
            context.translate(0, 0);
            context.moveTo(bodyCenterX, -bodyCenterY);
            context.rotate(Math.PI / (armPos * swivel));
            if (armBend) {
                context.lineTo((swivel * armLength) / 1.5, (-bodyCenterY / 2)+1);
                if (swivel == -1)
                    context.rotate(Math.PI/(armPos * swivel));
                drawHand(swivel * armLength);
            } else {
                context.lineTo(swivel * armLength, -bodyCenterY / 2);
            }
            context.stroke();
            context.restore();
        }
        function drawHand(handLength) {
            // x, y, width, height
            context.fillRect((handLength / 1.5), (-bodyCenterY / 2), 2, (swivel * armLength/2));
        }
        function drawBentArms() {
            context.save();
            context.translate(0, 0);
            context.moveTo(bodyCenterX, -bodyCenterY);
            context.rotate(Math.PI / (armPos * swivel));
            context.lineTo((swivel * armLength) / 1.5, -bodyCenterY / 2);
            drawHand(swivel * armLength);
            context.stroke();
            context.restore();
            context.save();
            context.translate(0, 0);
            context.moveTo(bodyCenterX, -bodyCenterY);
            context.rotate(Math.PI / (armPos * -swivel));
            context.lineTo(-(swivel * armLength) / 1.5, -bodyCenterY / 2);
            drawHand(-swivel * armLength);
            context.stroke();
            context.restore();
        }
        function drawLegXXX(swivel) {
            context.save();
            context.translate(0, 0);
            context.moveTo(bodyCenterX, bodyHeight);
            context.rotate(Math.PI / (footPos * swivel));
            if (legBend) {
                context.save();
                context.lineTo((swivel * legLength) / 1.5, bodyHeight);
                context.stroke();
                context.restore();
                drawFoot(swivel);
            } else {
                context.lineTo(swivel * legLength, bodyHeight);
            }
            context.stroke();
            context.restore();
        }
        function drawFoot(swivel) {
            context.save();
            context.translate(0, 0);
            //context.rotate((Math.PI) / 0.666);
            //context.lineTo((swivel * legLength), legLength / 333);
            context.fillRect((swivel * legLength) / 1.5, bodyHeight, 2, 30*swivel);
            context.stroke();
            context.restore();
        }
        /**** END FIGURE DRAWING ****/

        function jumpingJacks() {
            jumpingJacksArms(75);
            jumpingJacksLegs(75);
        }
        function jumpingJacksArms(speed) {
            // left
            
            // right
        }
        function jumpingJacksLegs(speed) {
            // left
            
            // right
        }
        function guyWalks() {
            legBend = !legBend;
            armBend = !armBend;
        }

        window.onload = function () {
            init();
        };
        </script> 
    </head> 
    <body onmousedown="return false;">
        <canvas id="stickScene" width="960" height="640"></canvas> 
    </body>
</html>